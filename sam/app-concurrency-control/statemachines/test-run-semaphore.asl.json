{
    "Comment": "A statemachine for running the main loop of tests ",
    "StartAt": "GenerateDefaultInput",
    "States": {
      "GenerateDefaultInput": {
        "Type": "Pass",
        "Parameters": {
          "iterations": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,84,95,96,97,98,99,100]
        },
        "Next": "StartInParallel"
      },

      "StartInParallel": {
          "Type": "Map",
          "ItemsPath": "$.iterations",
          "MaxConcurrency": 0,
          "End": true,
          "Iterator": {
              "StartAt": "RunChildStateMachine",
              "States": {
                  "RunChildStateMachine": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::states:startExecution",
                    "Parameters": {
                      "Input": {
                        "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                      },
                      "StateMachineArn": "${StateMachineSemaphore}"
                    },
                    "ResultSelector": {"Nothing": "Nothing"},
                    "Next": "ClearResults",
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "StepFunctions.ExecutionAlreadyExistsException"
                        ],
                        "IntervalSeconds": 1,
                        "BackoffRate": 5,
                        "MaxAttempts": 1
                      },
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "IntervalSeconds": 1,
                        "BackoffRate": 2,
                        "MaxAttempts": 12
                      }
                    ],
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.TaskFailed"
                        ],
                        "ResultPath": "$.stateoutput.RunChildStateMachine",
                        "Next": "ClearResults"
                      }
                    ]
                  },
                  "ClearResults": {
                    "Type": "Pass",
                    "Result": "Done",
                    "End": true
                  }
              }
          }
        
      }

    }
  }